// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  user_id            Int      @id @default(autoincrement())
  email              String   @unique
  password           String    
  role               String  //Admin; Teacher; Student
  account_status     String  //Activated; New; Disabled
  created_date       DateTime @default(now())
  updated_date       DateTime @default(now())
  userDetails        UserDetails? @relation(name: "UserToUserDetails") // ✅ Define relation name here only
}

model UserDetails {
  user_id           Int @unique  
  first_name        String
  middle_name       String?
  last_name         String  
  course            String?  //if Student -- N/A if teacher and admin
  online_status     String  //Active; Inactive
  profile_image     Bytes?
  thresh_hold       Decimal @default(0) //0 if student and admin; 
  updated_date      DateTime @default(now())
  user              User @relation(name: "UserToUserDetails", fields: [user_id], references: [user_id]) // ✅ Define relation only here
}

model ClassSubject {
  id                    Int @id @default(autoincrement()) 
  name                  String
  description           String
  date_schedule         String
  time_schedule         String
  teacher_user_id       Int  //user_id from UserDetails Table
  status                String //closed; ongoing;
  created_date          DateTime @default(now())
  updated_date          DateTime @default(now())
  students              ClassStudents[] @relation(name: "ClassSubjectToClassStudents")
  schedules             ClassSchedule[] @relation(name: "ClassSubjectToClassSchedule")
}

model ClassStudents {  
  id                    Int @id @default(autoincrement()) 
  class_subject_id      Int 
  student_id            Int  //user_id from UserDetails Table  
  subject               ClassSubject @relation(name: "ClassSubjectToClassStudents", fields: [class_subject_id], references: [id])
}

model ClassSchedule {
  id                   Int @id @default(autoincrement())
  class_subject_id     Int
  date_schedule        String 
  time_start           String
  time_end             String  
  status               String //Open; Upcoming; Closed; Canceled
  subject              ClassSubject @relation(name: "ClassSubjectToClassSchedule", fields: [class_subject_id], references: [id])
  lesson_plan          ClassLessonPlan? @relation(name: "ClassScheduleToClassLessonPlan")
  attendance           ClassAttendance[] @relation(name: "ClassScheduleToClassAttendance")
  student_fer          ClassStudentFER[] @relation(name: "ClassScheduleToClassStudentFer")
}

model ClassLessonPlan {
  id                    Int @id @default(autoincrement())   
  class_subject_id      Int
  class_schedule_id     Int @unique
  start_time            String
  title                 String  
  description           String
  status                String //Upcoming; Completed
  schedule              ClassSchedule @relation(name: "ClassScheduleToClassLessonPlan", fields: [class_schedule_id], references: [id])
}

model ClassAttendance {  
  id                    Int @id @default(autoincrement())   
  class_subject_id      Int 
  class_schedule_id     Int 
  student_id            Int
  time_in               DateTime
  time_out              DateTime
  status                String //attended; absent
  schedule              ClassSchedule @relation(name: "ClassScheduleToClassAttendance", fields: [class_schedule_id], references: [id])
}

model ClassStudentFER {  
  id                    Int @id @default(autoincrement())   
  class_subject_id      Int  
  class_schedule_id     Int  
  student_id            Int  //user_id from UserDetails Table
  surprised             Decimal
  happy                 Decimal
  neutral               Decimal
  sad                   Decimal
  angry                 Decimal
  disgusted             Decimal
  fearful               Decimal
  result                String // surprised; happy; neutral; sad; angry; disgusted; fearful;
  remarks               String // Face_Expression_Detected; No_Face_Expression_Detected;
  datetime_stamp        DateTime @default(now())  
  schedule              ClassSchedule @relation(name: "ClassScheduleToClassStudentFer", fields: [class_schedule_id], references: [id])
}

model Notification {
  id                  Int @id @default(autoincrement())
  datetime_stamp      DateTime @default(now())
  title               String
  message             String
  user_id             Int @default(0)
  color_code          String // 0 Green = Good; 1 Yellow = Warning; 2 Red = Critical;
  status              Int @default(0) //0 - Unread; 1 - Read 
  for_admin           String // Y; N;
}

model SystemLogs {
  id                  Int @id @default(autoincrement())
  timestamp           DateTime @default(now())
  level               String
  message             String
  exception           String
  entity_name         String
  user_id             Int @default(0)
  for_admin           String // Y; N;
}